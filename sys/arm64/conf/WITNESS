# SMP Debugging Options:
#
# CALLOUT_PROFILING enables rudimentary profiling of the callwheel data
#	  structure used as backend in callout(9).
# PREEMPTION allows the threads that are in the kernel to be preempted by
#	  higher priority [interrupt] threads.  It helps with interactivity
#	  and allows interrupt threads to run sooner rather than waiting.
#	  WARNING! Only tested on amd64 and i386.
# FULL_PREEMPTION instructs the kernel to preempt non-realtime kernel
#	  threads.  Its sole use is to expose race conditions and other
#	  bugs during development.  Enabling this option will reduce
#	  performance and increase the frequency of kernel panics by
#	  design.  If you aren't sure that you need it then you don't.
#	  Relies on the PREEMPTION option.  DON'T TURN THIS ON.
# MUTEX_DEBUG enables various extra assertions in the mutex code.
# SLEEPQUEUE_PROFILING enables rudimentary profiling of the hash table
#	  used to hold active sleep queues as well as sleep wait message
#	  frequency.
# TURNSTILE_PROFILING enables rudimentary profiling of the hash table
#	  used to hold active lock queues.
# UMTX_PROFILING enables rudimentary profiling of the hash table used 
#	  to hold active lock queues.
# WITNESS enables the witness code which detects deadlocks and cycles
#         during locking operations.
# WITNESS_KDB causes the witness code to drop into the kernel debugger if
#	  a lock hierarchy violation occurs or if locks are held when going to
#	  sleep.
# WITNESS_SKIPSPIN disables the witness checks on spin mutexes.
#options 	PREEMPTION
#options 	FULL_PREEMPTION
#options 	MUTEX_DEBUG
options 	WITNESS
#options 	WITNESS_KDB
#options 	WITNESS_SKIPSPIN

# LOCK_PROFILING - Profiling locks.  See LOCK_PROFILING(9) for details.
#options 	LOCK_PROFILING
# Set the number of buffers and the hash size.  The hash size MUST be larger
# than the number of buffers.  Hash size should be prime.
#options 	MPROF_BUFFERS="1536"
#options 	MPROF_HASH_SIZE="1543"

# Profiling for the callout(9) backend.
#options 	CALLOUT_PROFILING

# Profiling for internal hash tables.
#options 	SLEEPQUEUE_PROFILING
#options 	TURNSTILE_PROFILING
#options 	UMTX_PROFILING

#
# Enable extra debugging code for locks.  This stores the filename and
# line of whatever acquired the lock in the lock itself, and changes a
# number of function calls to pass around the relevant data.  This is
# not at all useful unless you are debugging lock code.  Also note
# that it is likely to break e.g. fstat(1) unless you recompile your
# userland with -DDEBUG_LOCKS as well.
#
options 	DEBUG_LOCKS

#
# Verbose SYSINIT
#
# Make the SYSINIT process performed by mi_startup() verbose.  This is very
# useful when porting to a new architecture.  If DDB is also enabled, this
# will print function names instead of addresses.
options 	VERBOSE_SYSINIT

makeoptions	DEBUG=-g		#Build kernel with gdb(1) debug symbols

